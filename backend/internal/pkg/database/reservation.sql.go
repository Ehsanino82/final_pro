// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: reservation.sql

package database

import (
	"context"

	"github.com/lib/pq"
)

const createReservation = `-- name: CreateReservation :one
INSERT INTO reservation(room_id, person_id, dates)
VALUES ($1, $2, $3)
RETURNING room_id, person_id, dates
`

type CreateReservationParams struct {
	RoomID   int32
	PersonID int32
	Dates    []int32
}

func (q *Queries) CreateReservation(ctx context.Context, arg CreateReservationParams) (Reservation, error) {
	row := q.db.QueryRowContext(ctx, createReservation, arg.RoomID, arg.PersonID, pq.Array(arg.Dates))
	var i Reservation
	err := row.Scan(&i.RoomID, &i.PersonID, pq.Array(&i.Dates))
	return i, err
}

const getRoomsReservedDates = `-- name: GetRoomsReservedDates :many
SELECT dates
FROM reservation
WHERE room_id = $1
`

func (q *Queries) GetRoomsReservedDates(ctx context.Context, roomID int32) ([][]int32, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsReservedDates, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items [][]int32
	for rows.Next() {
		var dates []int32
		if err := rows.Scan(pq.Array(&dates)); err != nil {
			return nil, err
		}
		items = append(items, dates)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
